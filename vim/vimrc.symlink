set nocompatible
set noswapfile
syntax on

colorscheme molokai

"----------
" Vundle config
"----------
filetype off                   " required!

" lead with ,
let mapleader = ","


set rtp+=~/.vim/bundle/vundle/

call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" Bundle 'tpope/vim-rails.git'
" Bundle 'mileszs/ack.vim'
" Bundle 'scrooloose/nerdtree'
Bundle 'git://git.wincent.com/command-t.git'
let g:CommandTMatchWindowAtTop=1 " show window at top
Bundle 'tpope/vim-fugitive'

" ACK
Bundle "git://github.com/mileszs/ack.vim.git"
nmap g/ :Ack! -w <space>
nmap g* :Ack! -w <C-R><C-W><space>
nmap ga :AckAdd!<space>
nmap gn :cnext<CR>
nmap gp :cprev<CR>
nmap gq :ccl<CR>
nmap gl :cwindow<CR>



" NERDTree for project drawer
Bundle "git://github.com/scrooloose/nerdtree.git"
let NERDTreeHijackNetrw = 0
let NERDTreeShowHidden=1

nmap gt :NERDTreeToggle<CR>
nmap g :NERDTree \| NERDTreeToggle \| NERDTreeFind<CR>
" autocmd VimEnter * NERDTree
" autocmd VimEnter * wincmd p



" rails.vim, nuff' said
Bundle "git://github.com/tpope/vim-rails.git"
map <Leader>oc :Rcontroller<Space>
map <Leader>ov :Rview<Space>
map <Leader>om :Rmodel<Space>
map <Leader>oh :Rhelper<Space>
map <Leader>oj :Rjavascript<Space>
map <Leader>os :Rstylesheet<Space>
map <Leader>oi :Rintegration<Space>

" surround for adding surround 'physics'
Bundle "git://github.com/tpope/vim-surround.git"
" # to surround with ruby string interpolation
let g:surround_35 = "#{\r}"
" - to surround with no-output erb tag
let g:surround_45 = "<% \r %>"
" = to surround with output erb tag
let g:surround_61 = "<%= \r %>"


" Tabular for aligning text
  Bundle "git://github.com/godlygeek/tabular.git"
    function! CustomTabularPatterns()
      if exists('g:tabular_loaded')
        AddTabularPattern! symbols         / :/l0
        AddTabularPattern! hash            /=>/
        AddTabularPattern! chunks          / \S\+/l0
        AddTabularPattern! assignment      / = /l0
        AddTabularPattern! comma           /,\zs /l0
        AddTabularPattern! colon           /:\zs /l0
        AddTabularPattern! options_hashes  /:\w\+ =>/
      endif
    endfunction

    autocmd VimEnter * call CustomTabularPatterns()

    " shortcut to align text with Tabular
    map <Leader>a :Tabular<space>

" ZoomWin to fullscreen a particular buffer without losing others
  Bundle "git://github.com/vim-scripts/ZoomWin.git"
    map <Leader>z :ZoomWin<CR>

Bundle "git://github.com/tpope/vim-commentary.git"
Bundle "git://github.com/airblade/vim-gitgutter.git"


filetype plugin indent on     " required!

"--------------------------

" don't wrap by default
set nowrap

" show commands as we type them
set showcmd

" highlight matching brackets
set showmatch

" scroll the window when we get near the edge
set scrolloff=4 sidescrolloff=10

" use 2 spaces for tabs
set expandtab tabstop=2 softtabstop=2 shiftwidth=2
set smarttab

" enable line numbers, and don't make them any wider than necessary
set number numberwidth=2

" show the first match as search strings are typed
set incsearch

" highlight the search matches
set hlsearch

" searching is case insensitive when all lowercase
set ignorecase smartcase

" assume the /g flag on substitutions to replace all matches in a line
set gdefault


" pick up external file modifications
set autoread

" don't abandon buffers when unloading
set hidden

" match indentation of previous line
set autoindent

" don't blink the cursor
set guicursor=a:blinkon0

" show current line info (current/total)
set ruler rulerformat=%=%l/%L

" show status line
set laststatus=2

" When lines are cropped at the screen bottom, show as much as possible
set display=lastline

" flip the default split directions to sane ones
set splitright
set splitbelow

" don't beep for errors
set visualbell

" make backspace work in insert mode
set backspace=indent,eol,start

" highlight trailing whitespace
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set list

" have the mouse enabled all the time
set mouse=a

" use tab-complete to see a list of possiblities when entering commands
set wildmode=list:longest,full

" allow lots of tabs
set tabpagemax=20

" remember last position in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" Thorfile, Rakefile, Vagrantfile, and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

" JSON is JS
au BufNewFile,BufRead *.json set ai filetype=javascript




" exit to normal mode with 'jj'
inoremap jj <ESC>

"easy wrap toggling
nmap <Leader>w :set wrap!<cr>
nmap <Leader>W :set nowrap<cr>

" mapping the jumping between splits. Hold control while using vim nav.
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-H> <C-W>h
nmap <C-L> <C-W>l

" buffer resizing mappings (shift + arrow key)
nnoremap <S-Up> <c-w>-
nnoremap <S-Down> <c-w>+
nnoremap <S-Left> <c-w>>
nnoremap <S-Right> <c-w><

" reindent the entire file
map <Leader>I gg=G``<cr>

" redo with U
nmap U :redo<cr>

nmap gs :e db/schema.rb<cr>
nmap gr :e config/routes.rb<cr>

" insert blank lines without going into insert mode
nmap go o<esc>
nmap gO O<esc>


"textmate like insertions for <%= %> and <% %>
imap <C-z> <lt>%=  %><Left><Left><Left>
imap <C-x> <lt>%  %><Left><Left><Left>

"clean up trailing whitespace
map <Leader>c :%s/\s\+$<cr>

"delete all buffers
map <Leader>d :bufdo bd<cr>

" make tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %

"buffer resizing (shift + arrow key)
nnoremap <S-Up> <c-w>+
nnoremap <S-Down> <c-w>-
nnoremap <S-Left> <c-w><
nnoremap <S-Right> <c-w>>


" C-TAB and C-SHIFT-TAB cycle tabs forward and backward
nmap <c-tab> :tabnext<cr>
imap <c-tab> <c-o>:tabnext<cr>
vmap <c-tab> <c-o>:tabnext<cr>
nmap <c-s-tab> :tabprevious<cr>
imap <c-s-tab> <c-o>:tabprevious<cr>
vmap <c-s-tab> <c-o>:tabprevious<cr>

